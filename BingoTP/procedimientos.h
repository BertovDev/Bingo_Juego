#ifndef PROCEDIMIENTOS_H_INCLUDED
#define PROCEDIMIENTOS_H_INCLUDED
#define RENGLON 3
#define COLUMNA 5
//PRE: No TIENE PRE CONDICIONES
//POST: ALMACENA EL NOMBRE , APELLIDO , DNI DEL JUGADOR Y LA CANTIDAD DE CARTONES ELEGIDOS PARA JUGAR
void datosJugador();

//PRE: NO TIENE.
//POSTCONDICONES: MUESTRA UN MENU PARA SABER CON CUANTOS CARTONES QUERES JUGAR Y DEVUELVE EL NUMERO ELEJIDO
int cuantosCartones();

//PRE: UNA MATRIZ DEFINIDA Y SABER CON CUANTO CARTONES QUIERE JUGAR .
//POSTCONDICIONES: CARAGA LA MATRIS DE CEROS.
void cargarMatrizDeCeros(int m[][RENGLON][COLUMNA], int opcion);

//PRE: UNA MATRIZ DEFINIDA, SABER CON CUANTO CARTONES QUIERE JUGAR Y
//EL NUMERO QUE SE BUSCA
//POSTCONDICIONE: SI ENCUETRA UN NUMERO REPETIDO DEVUELVE SU POSICION
//SINO ENCUENTRA UNNUMERO REPETIDO DEVUELVE EL MENOS UNO.
int buscarNumeroRepe(int m[][RENGLON][COLUMNA], int opcion, int busco);

//PRE: UNA MATRIZ DEFINIDA Y SABER CON CUANTO CARTONES QUIERE JUGAR .
//POSTCONDICIONES: MUSTRA UN MENU DE DOS OPCIONES PARA CARGAR LA MATRIZ,
// SEGUN LA OPCION ELEJIDA POR EL JUGADOR CARGA LA MATRIZ DE UNA FORMA
void tipoDeCarton(int m[][RENGLON][COLUMNA], int opci);

//PRE:  UNA MATRIZ DEFINIDA Y SABER CON CUANTO CARTONES QUIERE JUGAR .
//POSTCODICIONES : CARGA LA MATRIZ DE ELEJIDOS POR EL JUGADOR ENTRE EL 1 Y EL 90,
//SIN QUE SE REPITAN
void cargarManualmenteMatriz(int m[][RENGLON][COLUMNA], int opcion);

//PRE: UNA MATRIZ DEFINIDA Y SABER CON CUANTO CARTONES QUIERE JUGAR .
//POSTCONDICIONES: CARAGA LA MATRIS DE NUMEROS ALEATORIOS ENTRE EL 1 Y EL 90,
//SIN QUE SE REPITAN
void cargarMatrizAleatoriaSinRepetir(int m[][RENGLON][COLUMNA], int opcion);

//PRE:  UNA MATRIZ DEFINIDA Y SABER CON CUANTO CARTONES QUIERE JUGAR .
//POSTCONDICIONES : SE ENCARGA DE MOSTRAR CUALQUIER MATRIZ
void mostrarMatriz(int m[][RENGLON][COLUMNA], int opcion);

#endif  // PROCEDIMIENTOS_H_INCLUDED
